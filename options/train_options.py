from .base_options import BaseOptions

class TrainOptions(BaseOptions):
    def initialize(self):
        BaseOptions.initialize(self)
        self.parser.add_argument('--epoch', type=int, default=20, help='train epochs')
        self.parser.add_argument('--cur_epoch', type=int, default=1, help='train epochs')
        self.parser.add_argument('--cur_step', type=int, default=1, help='train epochs')
        self.parser.add_argument('--theta', type=float, default=1, help='train epochs')
        self.parser.add_argument('--start_epoch', type=int, default=1, help='which epoch to start')
        self.parser.add_argument('--epoch_steps', type=int, default=1000, help='steps of each epoch')
        self.parser.add_argument('--nsampler', type=int, default=12000, help='# of sample vertex for compute loss')
        self.parser.add_argument('--obj_filename', type=str, required=True,help='train obj filename')
        self.parser.add_argument('--input_nc', type=int,default=6,help='input channels')
        self.parser.add_argument('--print_freq', type=int, default=10, help='frequency of showing training results on console')
        self.parser.add_argument('--save_latest_freq', type=int, default=100, help='frequency of saving the latest results')
        self.parser.add_argument('--save_epoch_freq', type=int, default=100, help='frequency of saving checkpoints at the end of epochs')
        self.parser.add_argument('--continue_train', action='store_true', help='continue training: load the latest model')
        self.parser.add_argument('--epoch_count', type=int, default=1, help='the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...')
        self.parser.add_argument('--phase', type=str, default='train', help='train, val, test, etc')
        self.parser.add_argument('--which_epoch', type=str, default='latest', help='which epoch to load? set to latest to use latest cached model')
        self.parser.add_argument('--niter', type=int, default=100, help='# of iter at starting learning rate')
        self.parser.add_argument('--niter_decay', type=int, default=500, help='# of iter to linearly decay learning rate to zero')
        self.parser.add_argument('--beta1', type=float, default=0.9, help='momentum term of adam')
        self.parser.add_argument('--lr', type=float, default=0.0002, help='initial learning rate for adam')
        self.parser.add_argument('--lr_policy', type=str, default='plateau', help='learning rate policy: lambda|step|plateau')
        self.parser.add_argument('--lr_decay_iters', type=int, default=1000, help='multiply by a gamma every lr_decay_iters iterations')
        self.parser.add_argument('--weight_chamfer', type=float, default=1, help='weights of chamfer loss')
        self.parser.add_argument('--weight_chamfer_opposite', type=float, default=1, help='weights of chamfer opposite')
        self.parser.add_argument('--weight_beam_loss', type=float, default=0, help='weights of beam_gap loss')
        self.parser.add_argument('--beam_k_ratio', type=int, default=300, help='k of beam_gap loss knn')
        self.parser.add_argument('--beam_rad', type=float, default=0.01, help='radius of beam_gap loss')
        self.parser.add_argument('--weight_move_loss', type=float, default=0, help='weights of move loss')
        self.parser.add_argument('--weight_edge_loss', type=float, default=0.2, help='weights of edge loss')
        self.parser.add_argument('--weight_normal_loss', type=float, default=0, help='weights of normal loss')
        self.parser.add_argument('--weight_area_loss', type=float, default=0, help='weights of area loss')
        self.parser.add_argument('--weight_lap_loss', type=float, default=0, help='weights of laplace regularization')
        self.parser.add_argument('--weight_color_loss', type=float, default=1, help='weights of color')
        self.parser.add_argument('--weight_mse_loss', type=float, default=0, help='weights of color')
        self.parser.add_argument('--segmentation', type=int, default=1, help='Segmentation mode or not')
        self.parser.add_argument('--no_sample', action='store_true', help='face sample or not')
        self.parser.add_argument('--color', action='store_true', help='color or not')
        self.parser.add_argument('--texture', action='store_true', help='texture or not')
        self.parser.add_argument('--sample_gt', action='store_true', help='sample gt or not')
        self.parser.add_argument('--sample_mix', action='store_true', help='sample mix or not')
        self.parser.add_argument('--sample_gauss',  type=int, default=0, help='sample gauss or not')
        self.parser.add_argument('--sample_sigma', type=float, default=0.0, help='sample gauss or not')
        self.parser.add_argument('--method', type=str,default='chamfer' ,help='loss method:fix_idx,chamfer')
        self.parser.add_argument('--noise_factor', type=float, default=0.0, help='random vector noise factor')
        self.parser.add_argument('--abs_vs', action='store_true', help='abs_vs')
        self.parser.add_argument('--ratio_gt_sample', type=float,default=0.0 ,help='ratio_gt_sample')
        self.parser.add_argument('--mesh_feat', action='store_true', help='add mesh_feat as input')
        self.parser.add_argument('--img_feat', action='store_true', help='add img_feat as input')
        self.parser.add_argument('--gt_sample', action='store_true', help='gt_sample')
        self.parser.add_argument('--geo_color', action='store_true', help='geo_color')
        self.parser.add_argument('--dist', action='store_true', help='dist or xyz')



        # data augmentation stuff
        self.parser.add_argument('--num_aug', type=int, default=10, help='# of augmentation files')
        self.parser.add_argument('--scale_verts', action='store_true', help='non-uniformly scale the mesh e.g., in x, y or z')
        self.parser.add_argument('--slide_verts', type=float, default=0, help='percent vertices which will be shifted along the mesh surface')
        self.parser.add_argument('--flip_edges', type=float, default=0, help='percent of edges to randomly flip')
        # tensorboard visualization
        self.parser.add_argument('--no_vis', action='store_true', help='will not use tensorboard')
        self.parser.add_argument('--verbose_plot', action='store_true', help='plots network weights, etc.')
        self.is_train = True
